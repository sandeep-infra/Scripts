## Check for client secrets which are going to expire in the mentioned period & send the email only if it expires in the mentioned period or lower otherwise ignore.

$TenantId = "<tenantID>"
$ClientId = "<ClientID"
 
 
$ClientSecret = "<ClientSecret>"| ConvertTo-SecureString -AsPlainText -Force


$DaysUntilExpiration = 30
$IncludeAlreadyExpired = "No"
$Path = "C:\Users\sysvl-samed15\ClientSecretExpiryIDNAP.csv"
$InputCsvPath = "C:\Users\sysvl-samed15\IDNAPclientIDs.csv"

$Credential = New-Object System.Management.Automation.PSCredential($ClientId, $ClientSecret)
Connect-MgGraph -TenantId $TenantId -ClientSecretCredential $Credential
# Read and validate input CSV
$appsToCheck = Import-Csv -Path $InputCsvPath -ErrorAction Stop
if (-not ($appsToCheck[0].PSObject.Properties.Name -contains "ClientID")) {
    throw "CSV must contain a 'ClientID' column"
}
# Get all apps and filter by CSV ClientIDs
$allApps = Get-MgApplication -All -Property "id,appId,displayName,passwordCredentials"
$selectedApps = @()
$notFoundApps = @()
foreach ($inputApp in $appsToCheck) {
    $cleanClientId = $inputApp.ClientID.Trim()
    $matchedApp = $allApps | Where-Object { $_.AppId -eq $cleanClientId }
    if ($matchedApp) {
        $selectedApps += $matchedApp
    } else {
        $notFoundApps += $cleanClientId
    }
}
if ($notFoundApps) {
    Write-Host "Missing ClientIDs:`n$($notFoundApps -join "`n")" -ForegroundColor Yellow
}
# Process ONLY selected applications
$reportData = [System.Collections.Generic.List[PSObject]]::new()
foreach ($app in $selectedApps) {
    try {
        # Check secrets
        $expiringSecrets = @()
        foreach ($secret in $app.PasswordCredentials) {
            $endDate = [datetime]$secret.EndDateTime
            $remainingDays = ($endDate - (Get-Date)).Days
            if ($IncludeAlreadyExpired -eq "Yes" -and $remainingDays -le $DaysUntilExpiration) {
                $expiringSecrets += $secret
            }
            elseif ($remainingDays -le $DaysUntilExpiration -and $remainingDays -ge 0) {
                $expiringSecrets += $secret
            }
        }
if (-not $expiringSecrets) { continue }
# Get owners
        $owners = Get-MgApplicationOwner -ApplicationId $app.Id -All
        $ownerInfo = $owners | ForEach-Object {
            if ($_.AdditionalProperties['@odata.type'] -eq '#microsoft.graph.user') {
                [PSCustomObject]@{
                    Name = $_.AdditionalProperties['userPrincipalName']
                    Id   = $_.Id
                }
            } else {
                [PSCustomObject]@{
                    Name = "$($_.AdditionalProperties['displayName']) (Service Principal)"
                    Id   = $_.Id
                }
            }
        }
# Build report
        foreach ($secret in $expiringSecrets) {
            $reportData.Add([PSCustomObject]@{
                ApplicationName   = $app.DisplayName
                ApplicationID     = $app.AppId
                SecretName        = $secret.DisplayName
                SecretStartDate   = [datetime]$secret.StartDateTime
                SecretEndDate     = [datetime]$secret.EndDateTime
                OwnerNames        = ($ownerInfo.Name) -join ';'
                OwnerIds          = ($ownerInfo.Id) -join ';'
                DaysUntilExpiry   = ($secret.EndDateTime - (Get-Date)).Days
            })
        }
    }
    catch {
        Write-Host "Error processing $($app.DisplayName): $_" -ForegroundColor Red
    }
}
# Export results if there are expiring secrets
if ($reportData.Count -gt 0) {
    $reportData | Export-Csv -Path $Path -NoTypeInformation -Encoding UTF8 -Force
    Write-Host "Report generated for $($selectedApps.Count) applications with $($reportData.Count) expiring secrets"
$EmailBody = @"
Hej,

Attached is a report generated for $($selectedApps.Count) applications with $($reportData.Count) expiring secrets.


Regards,
IAM Ops Team
"@
$SmtpServer = "smtp-relay.inter-ikea.com"
    $cc = "xyz@domain.com","xyzabc@domain.com"
    $From = "xyz@domain.com"
    $To = "abc@domain.com"
$Subject = "Upcoming Client Secret Expiry Notification"
    $Attachment = $Path
Send-MailMessage -SmtpServer $SmtpServer -From $From -To $To -cc $cc -Subject $Subject -Body $EmailBody -Attachments $Attachment
Write-Host "Email has been sent successfully to $To" -ForegroundColor Green
} else {
    Write-Host "No expiring secrets found within the next $DaysUntilExpiration days" -ForegroundColor Green
}
