#$TenantId = "<Tid>"
#$ClientId = "<Cid>"
 
$ClientSecret = "<CS>"| ConvertTo-SecureString -AsPlainText -Force
$DaysUntilExpiration = 15
$IncludeAlreadyExpired = "No"
$Path = "C:\Users\sysvl-samed15\ClientSecretExpiryprod.csv"
 
# Create credential object
$Credential = New-Object System.Management.Automation.PSCredential($ClientId, $ClientSecret)
 
# Connect using Microsoft Graph PowerShell module
Connect-MgGraph -TenantId $TenantId -ClientSecretCredential $Credential
 
Write-Host "Fetching applications with secrets..." -ForegroundColor Cyan
 
# Rest of your script remains the same...
 
 
# Get all applications with password credentials in a single query
$apps = Get-MgApplication -All -Property "id,appId,displayName,passwordCredentials" -ErrorAction Stop
 
Write-Host "Processing $($apps.Count) applications..." -ForegroundColor Cyan
 
# Pre-calculate expiration threshold date
$thresholdDate = (Get-Date).AddDays($DaysUntilExpiration).Date
$reportData = [System.Collections.Generic.List[PSObject]]::new()
 
# First pass: Identify apps with expiring secrets
$appsWithExpiringSecrets = [System.Collections.Generic.List[object]]::new()
foreach ($app in $apps) {
    $hasExpiringSecret = $false
    foreach ($secret in $app.PasswordCredentials) {
        $endDate = [datetime]$secret.EndDateTime
        $remainingDays = ($endDate - (Get-Date)).Days
        if ($IncludeAlreadyExpired -eq "Yes" -and $remainingDays -le $DaysUntilExpiration) {
            $hasExpiringSecret = $true
            break
        }
        elseif ($remainingDays -le $DaysUntilExpiration -and $remainingDays -ge 0) {
            $hasExpiringSecret = $true
            break
        }
    }
    if ($hasExpiringSecret) {
        $appsWithExpiringSecrets.Add($app)
    }
}
 
Write-Host "Found $($appsWithExpiringSecrets.Count) applications with expiring secrets. Fetching owners..." -ForegroundColor Cyan
 
# Second pass: Get owners only for apps with expiring secrets
foreach ($app in $appsWithExpiringSecrets) {
    try {
        $owners = Get-MgApplicationOwner -ApplicationId $app.Id -All -ErrorAction Stop
    }
    catch {
        Write-Host "Error fetching owners for app $($app.DisplayName): $_" -ForegroundColor Red
        continue
    }
 
    # Process owner information
    $ownerNames = @()
    $ownerIds = @()
    foreach ($owner in $owners) {
        if ($owner.AdditionalProperties['@odata.type'] -eq '#microsoft.graph.user') {
            $ownerNames += $owner.AdditionalProperties['userPrincipalName']
            $ownerIds += $owner.Id
        }
        else {
            $ownerNames += "$($owner.AdditionalProperties['displayName']) (Service Principal)"
            $ownerIds += $owner.Id
        }
    }
 
    if (-not $ownerNames) {
        $ownerNames = '<<No Owner>>'
        $ownerIds = '<<No Owner>>'
    }
 
    # Process secrets again for reporting
    foreach ($secret in $app.PasswordCredentials) {
        $endDate = [datetime]$secret.EndDateTime
        $remainingDays = ($endDate - (Get-Date)).Days
        if (($IncludeAlreadyExpired -eq "Yes" -and $remainingDays -le $DaysUntilExpiration) -or 
            ($remainingDays -le $DaysUntilExpiration -and $remainingDays -ge 0)) {
            $reportData.Add([PSCustomObject]@{
                ApplicationName   = $app.DisplayName
                ApplicationID     = $app.AppId
                SecretName        = $secret.DisplayName
                SecretStartDate   = [datetime]$secret.StartDateTime
                SecretEndDate     = $endDate
                Owner             = $ownerNames -join ';'
                Owner_ObjectID    = $ownerIds -join ';'
                DaysUntilExpiry   = $remainingDays
            })
        }
    }
}
 
# Export results
$reportData | Export-Csv -Path $Path -NoTypeInformation -Encoding UTF8 -Force
Write-Host "Report generated at $Path with $($reportData.Count) entries" -ForegroundColor Green


$EmailBody = @"
Hej,

Attached is a CSV file containing details of applications with client secrets and certificates which are set to expire within the next $DaysUntilExpiration days.

Regards,
IAM Ops Team
"@
#$Path="C:\Users\sysvl-samed15\appexpiry30days.csv"

$SmtpServer = "smtp-relay.inter-ikea.com"
$cc = "abc@domain.com","abc@domain.com"
$From = "abc@domain.com"
$To = "abc@domain.com"

$Subject = "Upcoming Client Secret/Certificate Expiry Notification"
$Attachment = $Path

Send-MailMessage -SmtpServer $SmtpServer -From $From -To $To -Cc $cc -Subject $Subject -Body $EmailBody -Attachments $Attachment

Write-Host "Email has been sent successfully to $To" -ForegroundColor Green #
