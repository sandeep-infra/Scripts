$TenantId = "
$ClientId = ""
$ClientSecret = "" | ConvertTo-SecureString -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential($ClientId, $ClientSecret)

# Connect using client credentials flow
Connect-MgGraph -TenantId $TenantId -ClientSecretCredential $Credential

# --- Date calculations ---
$sixMonthsAgo = (Get-Date).AddMonths(-6).ToUniversalTime()
$threeMonthsAgo = (Get-Date).AddMonths(-3).ToUniversalTime()
$filterDate = $sixMonthsAgo.ToString("yyyy-MM-ddTHH:mm:ssZ")

# --- 1. Fetch non-interactive sign-ins ---
Write-Host "Fetching non-interactive sign-ins..." -ForegroundColor Cyan
$nonInteractiveSignIns = Get-MgAuditLogSignIn -Filter "isInteractive eq false and createdDateTime ge $filterDate" -All `
    | Group-Object -Property UserId -AsHashTable

# --- 2. Retrieve guest users (include Mail & OtherMails) ---
Write-Host "Retrieving guest users..." -ForegroundColor Cyan
$guestUsers = Get-MgUser -Filter "UserType eq 'Guest'" `
    -Property "DisplayName,UserPrincipalName,Mail,OtherMails,SignInActivity,UserType,ExternalUserState,CreatedDateTime,Id,AccountEnabled" -All

# --- 3. Process guest users ---
Write-Host "Processing $($guestUsers.Count) guest users..." -ForegroundColor Cyan
$GuestUsersWithSignInActivity = foreach ($user in $guestUsers) {
    $lastInteractive = $user.SignInActivity.LastSignInDateTime

    # safely check for non-interactive logs
    $lastNonInteractive = $null
    if ($nonInteractiveSignIns -and $nonInteractiveSignIns.ContainsKey($user.Id)) {
        $lastNonInteractive = $nonInteractiveSignIns[$user.Id] |
            Sort-Object CreatedDateTime -Descending |
            Select-Object -First 1 -ExpandProperty CreatedDateTime
    }

    $lastActivity = ($lastInteractive, $lastNonInteractive | Sort-Object -Descending | Select-Object -First 1)

    if (($null -eq $lastActivity) -or ($lastActivity -lt $sixMonthsAgo)) {

        # --- Get Manager ---
        $managerObj = $null
        try {
            $managerObj = Invoke-MgGraphRequest -Method GET `
                -Uri "https://graph.microsoft.com/v1.0/users/$($user.Id)/manager"
        } catch { }
        $managerEmail = if ($managerObj) { $managerObj.mail } else { "" }

        # --- Get Sponsors ---
        $sponsorObj = $null
        try {
            $sponsorObj = Invoke-MgGraphRequest -Method GET `
                -Uri "https://graph.microsoft.com/v1.0/users/$($user.Id)/sponsors"
        } catch { }
        $sponsorEmails = if ($sponsorObj.value) {
            ($sponsorObj.value | ForEach-Object { if ($_.mail) { $_.mail } else { $_.userPrincipalName } }) -join "; "
        } else { "" }

        # --- Guest Email & Domain ---
        if ($user.Mail) {
            $guestEmail = $user.Mail
        }
        elseif ($user.OtherMails -and $user.OtherMails.Count -gt 0) {
            $guestEmail = $user.OtherMails[0]
        }
        else {
            # fallback cleanup from UPN
            $guestEmail = $user.UserPrincipalName -replace "_", "." -replace "#EXT#",""
        }
        $guestDomain = if ($guestEmail -match "@") { $guestEmail.Substring($guestEmail.IndexOf("@")) } else { "" }

        # --- Account State (Enabled/Disabled) ---
        $accountState = if ($user.AccountEnabled -eq $true) { "Enabled" } else { "Disabled" }

        # --- Output object ---
        [PSCustomObject]@{
           # DisplayName                  = $user.DisplayName
            UserPrincipalName            = $user.UserPrincipalName
            GuestEmail                   = $guestEmail
            LastInteractive              = $lastInteractive
            LastNonInteractive           = $lastNonInteractive
            InvitationPendingOver3Months = if ($user.ExternalUserState -eq 'PendingAcceptance' -and $user.CreatedDateTime -lt $threeMonthsAgo) { "Yes" } else { "No" }
            InvitationSentDate           = $user.CreatedDateTime
            UserState                    = $user.ExternalUserState
            ManagerEmail                 = $managerEmail
            SponsorEmails                = $sponsorEmails
            AccountState                 = $accountState
            GuestDomain                  = $guestDomain
        }
    }
}

# --- Export results ---
$csvPath = "C:\Users\sande\OneDrive\data-inout-PS\lastlogin_guests_with_manager_sponsors_state_prod.csv"
$GuestUsersWithSignInActivity | Export-Csv -Path $csvPath -NoTypeInformation -Force
Write-Host "Exported results to $csvPath" -ForegroundColor Green
